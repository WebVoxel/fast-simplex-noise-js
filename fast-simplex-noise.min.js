/*
 * A speed-improved simplex noise algorithm for 2D, 3D and 4D in JavaScript.
 *
 * Based on example code by Stefan Gustavson (stegu@itn.liu.se).
 * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
 * Better rank ordering method by Stefan Gustavson in 2012.
 *
 * This code was placed in the public domain by its original author,
 * Stefan Gustavson. You may use it as you see fit, but
 * attribution is appreciated.
 */
function FastSimplexNoise(e){e||(e={}),this.amplitude=e.amplitude||1,this.frequency=e.frequency||1,this.octaves=parseInt(e.octaves||1),this.persistence=e.persistence||.5,this.random=e.random||Math.random
for(var t=new Uint8Array(256),i=0;256>i;i++)t[i]=i
for(var s,r,i=255;i>0;i--)s=Math.floor((i+1)*this.random()),r=t[i],t[i]=t[s],t[s]=r
this.perm=new Uint8Array(512),this.permMod12=new Uint8Array(512)
for(var i=0;512>i;i++)this.perm[i]=t[255&i],this.permMod12[i]=this.perm[i]%12}FastSimplexNoise.F2=.5*(Math.sqrt(3)-1),FastSimplexNoise.G2=(3-Math.sqrt(3))/6,FastSimplexNoise.F3=1/3,FastSimplexNoise.G3=1/6,FastSimplexNoise.F4=(Math.sqrt(5)-1)/4,FastSimplexNoise.G4=(5-Math.sqrt(5))/20,FastSimplexNoise.GRADIENTS_3D=[[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,-1],[0,1,-1],[0,-1,-1]],FastSimplexNoise.GRADIENTS_4D=[[0,1,1,1],[0,1,1,-1],[0,1,-1,1],[0,1,-1,-1],[0,-1,1,1],[0,-1,1,-1],[0,-1,-1,1],[0,-1,-1,-1],[1,0,1,1],[1,0,1,-1],[1,0,-1,1],[1,0,-1,-1],[-1,0,1,1],[-1,0,1,-1],[-1,0,-1,1],[-1,0,-1,-1],[1,1,0,1],[1,1,0,-1],[1,-1,0,1],[1,-1,0,-1],[-1,1,0,1],[-1,1,0,-1],[-1,-1,0,1],[-1,-1,0,-1],[1,1,1,0],[1,1,-1,0],[1,-1,1,0],[1,-1,-1,0],[-1,1,1,0],[-1,1,-1,0],[-1,-1,1,0],[-1,-1,-1,0]],FastSimplexNoise.dot2D=function(e,t,i){return e[0]*t+e[1]*i},FastSimplexNoise.dot3D=function(e,t,i,s){return e[0]*t+e[1]*i+e[2]*s},FastSimplexNoise.dot4D=function(e,t,i,s,r){return e[0]*t+e[1]*i+e[2]*s+e[3]*r},FastSimplexNoise.prototype.get2DNoise=function(e,t){for(var i=this.amplitude,s=this.frequency,r=0,o=0,p=0;p<this.octaves;p++)o+=this.getRaw2DNoise(e*s,t*s)*i,r+=i,i*=this.persistence,s*=2
return o/r},FastSimplexNoise.prototype.get3DNoise=function(e,t,i){for(var s=this.amplitude,r=this.frequency,o=0,p=0,a=0;a<this.octaves;a++)p+=this.getRaw3DNoise(e*r,t*r,i*r)*s,o+=s,s*=this.persistence,r*=2
return p/o},FastSimplexNoise.prototype.get4DNoise=function(e,t,i,s){for(var r=this.amplitude,o=this.frequency,p=0,a=0,m=0;m<this.octaves;m++)a+=this.getRaw4DNoise(e*o,t*o,i*o,s*o)*r,p+=r,r*=this.persistence,o*=2
return a/p},FastSimplexNoise.prototype.getCylindricalNoise=function(e,t,i){var s=t/e,r=e/(2*Math.PI),o=2*s*Math.PI,p=r*Math.sin(o),a=r*Math.cos(o)
return this.get3DNoise(p,a,i)},FastSimplexNoise.prototype.getRaw2DNoise=function(e,t){var i,s,r,o,p,a=FastSimplexNoise.G2,m=FastSimplexNoise.dot2D,h=FastSimplexNoise.GRADIENTS_3D,n=(e+t)*FastSimplexNoise.F2,l=Math.floor(e+n),N=Math.floor(t+n),f=(l+N)*a,F=l-f,S=N-f,u=e-F,x=t-S
u>x?(o=1,p=0):(o=0,p=1)
var d=u-o+a,c=x-p+a,v=u-1+2*a,M=x-1+2*a,D=255&l,y=255&N,g=this.permMod12[D+this.perm[y]],G=this.permMod12[D+o+this.perm[y+p]],R=this.permMod12[D+1+this.perm[y+1]],q=.5-u*u-x*x
0>q?i=0:(q*=q,i=q*q*m(h[g],u,x))
var w=.5-d*d-c*c
0>w?s=0:(w*=w,s=w*w*m(h[G],d,c))
var A=.5-v*v-M*M
return 0>A?r=0:(A*=A,r=A*A*m(h[R],v,M)),70.1*(i+s+r)},FastSimplexNoise.prototype.getRaw3DNoise=function(e,t,i){var s,r,o,p,a,m,h,n,l,N,f=FastSimplexNoise.dot3D,F=FastSimplexNoise.GRADIENTS_3D,S=FastSimplexNoise.G3,u=(e+t+i)*FastSimplexNoise.F3,x=Math.floor(e+u),d=Math.floor(t+u),c=Math.floor(i+u),v=(x+d+c)*S,M=x-v,D=d-v,y=c-v,g=e-M,G=t-D,R=i-y
g>=G?G>=R?(a=1,m=0,h=0,n=1,l=1,N=0):g>=R?(a=1,m=0,h=0,n=1,l=0,N=1):(a=0,m=0,h=1,n=1,l=0,N=1):R>G?(a=0,m=0,h=1,n=0,l=1,N=1):R>g?(a=0,m=1,h=0,n=0,l=1,N=1):(a=0,m=1,h=0,n=1,l=1,N=0)
var q=g-a+S,w=G-m+S,A=R-h+S,I=g-n+2*S,E=G-l+2*S,T=R-N+2*S,_=g-1+3*S,U=G-1+3*S,P=R-1+3*S,C=255&x,b=255&d,j=255&c,k=this.permMod12[C+this.perm[b+this.perm[j]]],z=this.permMod12[C+a+this.perm[b+m+this.perm[j+h]]],B=this.permMod12[C+n+this.perm[b+l+this.perm[j+N]]],H=this.permMod12[C+1+this.perm[b+1+this.perm[j+1]]],J=.5-g*g-G*G-R*R
0>J?s=0:(J*=J,s=J*J*f(F[k],g,G,R))
var K=.5-q*q-w*w-A*A
0>K?r=0:(K*=K,r=K*K*f(F[z],q,w,A))
var L=.5-I*I-E*E-T*T
0>L?o=0:(L*=L,o=L*L*f(F[B],I,E,T))
var O=.5-_*_-U*U-P*P
return 0>O?p=0:(O*=O,p=O*O*f(F[H],_,U,P)),94.6*(s+r+o+p)},FastSimplexNoise.prototype.getRaw4DNoise=function(e,t,i,s){var r,o,p,a,m,h=FastSimplexNoise.dot4D,n=FastSimplexNoise.GRADIENTS_4D,l=FastSimplexNoise.G4,N=(e+t+i+s)*FastSimplexNoise.F4,f=Math.floor(e+N),F=Math.floor(t+N),S=Math.floor(i+N),u=Math.floor(s+N),x=(f+F+S+u)*l,d=f-x,c=F-x,v=S-x,M=u-x,D=e-d,y=t-c,g=i-v,G=s-M,R=0,q=0,w=0,A=0
D>y?R++:q++,D>g?R++:w++,D>G?R++:A++,y>g?q++:w++,y>G?q++:A++,g>G?w++:A++
var I,E,T,_,U,P,C,b,j,k,z,B
I=R>=3?1:0,E=q>=3?1:0,T=w>=3?1:0,_=A>=3?1:0,U=R>=2?1:0,P=q>=2?1:0,C=w>=2?1:0,b=A>=2?1:0,j=R>=1?1:0,k=q>=1?1:0,z=w>=1?1:0,B=A>=1?1:0
var H=D-I+l,J=y-E+l,K=g-T+l,L=G-_+l,O=D-U+2*l,Q=y-P+2*l,V=g-C+2*l,W=G-b+2*l,X=D-j+3*l,Y=y-k+3*l,Z=g-z+3*l,$=G-B+3*l,et=D-1+4*l,tt=y-1+4*l,it=g-1+4*l,st=G-1+4*l,rt=255&f,ot=255&F,pt=255&S,at=255&u,mt=this.perm[rt+this.perm[ot+this.perm[pt+this.perm[at]]]]%32,ht=this.perm[rt+I+this.perm[ot+E+this.perm[pt+T+this.perm[at+_]]]]%32,nt=this.perm[rt+U+this.perm[ot+P+this.perm[pt+C+this.perm[at+b]]]]%32,lt=this.perm[rt+j+this.perm[ot+k+this.perm[pt+z+this.perm[at+B]]]]%32,Nt=this.perm[rt+1+this.perm[ot+1+this.perm[pt+1+this.perm[at+1]]]]%32,ft=.5-D*D-y*y-g*g-G*G
0>ft?r=0:(ft*=ft,r=ft*ft*h(n[mt],D,y,g,G))
var Ft=.5-H*H-J*J-K*K-L*L
0>Ft?o=0:(Ft*=Ft,o=Ft*Ft*h(n[ht],H,J,K,L))
var St=.5-O*O-Q*Q-V*V-W*W
0>St?p=0:(St*=St,p=St*St*h(n[nt],O,Q,V,W))
var ut=.5-X*X-Y*Y-Z*Z-$*$
0>ut?a=0:(ut*=ut,a=ut*ut*h(n[lt],X,Y,Z,$))
var xt=.5-et*et-tt*tt-it*it-st*st
return 0>xt?m=0:(xt*=xt,m=xt*xt*h(n[Nt],et,tt,it,st)),72.3*(r+o+p+a+m)},"undefined"!=typeof define&&define.amd&&define(function(){return FastSimplexNoise}),"undefined"!=typeof exports&&(exports.FastSimplexNoise=FastSimplexNoise),"undefined"!=typeof module&&(module.exports=FastSimplexNoise)
